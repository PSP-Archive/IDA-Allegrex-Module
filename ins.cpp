/*
 *      allegrex module for the Interactive disassembler (IDA).
 *
 *      based on pspdis, written by xor37h/Hitmen
 *
 *      updates, fixes and bugreports welcomed (you know where i am)
 *
 *      (w)2006 by Groepaz/Hitmen
 */

#include "allegrex.hpp"

instruc_t Instructions[] = {

{ "???",           0                               },      // Unknown Operation

/*
{ "jsr",      CF_USE1|CF_CALL                 },      // Absolute Call
{ "call",      CF_USE1|CF_CALL                 },      // Absolute Call
{ "calls",      CF_USE1|CF_CALL                 },      // Absolute Call
{ "add",        CF_USE1|CF_USE2|CF_CHG2         },      // Add Second Operand to Acc
{ "addc",       CF_USE1|CF_USE2|CF_CHG2         },      // Add Second Operand to Acc with carry
{ "jmp",       CF_USE1|CF_STOP|CF_JUMP                 },      // Absolute Jump
 { "and",        CF_USE1|CF_USE2|CF_CHG2         },      // Logical AND (op1 &= op2)
 { "div",        CF_USE1|CF_USE2|CF_CHG2                 },      // Divide Acc by B
 { "tbnz",         CF_USE1|CF_USE2|CF_USE3|CF_JUMP                 },      // Jump if Bit is set
 
 { "bcs",         CF_USE1|CF_JUMP                         },      // Jump if Carry is set
 { "tbz",        CF_USE1|CF_USE2|CF_USE3|CF_JUMP                 },      // Jump if Bit is clear
 { "bcc",        CF_USE1|CF_JUMP                         },      // Jump if Carry is clear
 { "mov",        CF_CHG2|CF_USE1                 },      // Move (Op1 -> Op2)
 { "movb",        CF_CHG2|CF_USE1                 },      // Move (Op1 -> Op2)
 { "movbu",        CF_CHG2|CF_USE1                 },      // Move (Op1 -> Op2)
 { "movhu",        CF_CHG2|CF_USE1                 },      // Move (Op1 -> Op2)
 { "movi",        CF_CHG2|CF_USE1                 },      // Move (Op1 -> Op2)
 { "movm",        CF_CHG2|CF_USE1                 },      // Move (Op1 -> Op2)

{ "movc",       CF_CHG2|CF_USE2                 },      // Move code byte relative to second op to Acc
{ "movx",       CF_CHG2|CF_USE2                 },      // Move from/to external RAM
{ "mulu",        CF_USE1|CF_CHG2                 },      // Multiply Acc by B
{ "div",        CF_USE1|CF_CHG2                 },      // Multiply Acc by B
 { "nop",        0                               },      // No operation
 { "or",        CF_USE1|CF_USE2|CF_CHG2         },      // Logical OR (op1 |= op2)
 { "rts",        CF_STOP                         },      // Return from subroutine
 { "rti",       CF_STOP                         },      // Return from Interrupt
 { "asl",         CF_USE1|CF_CHG2                 },      // Rotate Acc left
 { "rol",        CF_USE1|CF_CHG1                 },      // Rotate Acc left through Carry
 { "lsr",         CF_USE1|CF_CHG2                 },      // Rotate Acc right
 { "ror",        CF_USE1|CF_CHG2                 },      // Rotate Acc right through Carry
 { "bset",       CF_USE1|CF_CHG2                         },      // Set Direct Bit
 { "bclr",       CF_USE1|CF_CHG2                         },      // Set Direct Bit
 { "clr",       CF_USE1|CF_CHG1                         },      

 { "inc",       CF_USE1|CF_CHG1                         },      
{ "inc4",       CF_USE1|CF_CHG1                         },      
{ "asl2",       CF_USE1|CF_CHG1                         },      

 { "bra",       CF_USE1|CF_STOP                 },      // Short jump
 { "subc",       CF_USE1|CF_USE2|CF_CHG2         },      // Subtract Second Operand from Acc with Borrow
 { "xor",        CF_USE1|CF_USE2|CF_CHG2         },      // Exclusive OR (op1 ^= op2)
 
 { "ble",       CF_USE1|CF_JUMP                         },      // Jump if less than or equal (signed)
 { "bgt",        CF_USE1|CF_JUMP                         },      // Jump if greater than (signed)
 { "bls",        CF_USE1|CF_JUMP                         },      // Jump if less than or equal
 { "bhi",        CF_USE1|CF_JUMP                         },      // Jump if greater than
 { "blt",        CF_USE1|CF_JUMP                         },      // Jump if less than (signed)
 { "bge",       CF_USE1|CF_JUMP                         },      // Jump if greater than or equal (signed)
 { "beq",         CF_USE1|CF_JUMP                         },      // Jump if equal
 { "bne",        CF_USE1|CF_JUMP                         },      // Jump if not equal

{ "movh",       CF_CHG2|CF_USE2                 },      // Move immediate 16-bit data to the high word of a dword (double-word) register
{ "movz",       CF_CHG2|CF_USE2                 },      // Move 8-bit register to 16-bit register with zero extension
{ "movs",       CF_CHG2|CF_USE2                 },      // Move 8-bit register to 16-bit register with sign extension
{ "asr",        CF_CHG2|CF_USE1                },      // Shift arithmetic right by 1 bit
{ "sub",        CF_CHG2|CF_USE2                 },      // Subtract
{ "cmp",        CF_USE1|CF_USE2                 },      // Compare

{ "extx",        CF_CHG1|CF_USE1                         },      
{ "extxu",        CF_CHG1|CF_USE1                         },      
{ "extxb",        CF_CHG1|CF_USE1                         },      
{ "extxbu",        CF_CHG1|CF_USE1                         },      

{ "extb",        CF_CHG1|CF_USE1                         },      
{ "extbu",        CF_CHG1|CF_USE1                         },      
{ "exth",        CF_CHG1|CF_USE1                         },      
{ "exthu",        CF_CHG1|CF_USE1                         },      

 { "blcr",        CF_USE1                         },      
 { "mulql",        CF_USE1                         },      
 { "mulq",        CF_USE1                         },      
 { "mulqh",        CF_USE1                         },      
 { "mul",        CF_USE1                         },      
 { "ext",        CF_USE1                         },      
 { "not",        CF_USE1                         },      
 { "pxst",        CF_USE1                         },      
 { "bltx",        CF_USE1|CF_JUMP                         },      
 { "bgtx",        CF_USE1|CF_JUMP                         },      
 { "bgex",        CF_USE1|CF_JUMP                         },      
 { "blex",        CF_USE1|CF_JUMP                         },      
 { "bcsx",        CF_USE1|CF_JUMP                         },      
 { "bhix",        CF_USE1|CF_JUMP                         },      
 { "bccx",        CF_USE1|CF_JUMP                         },      
 { "blsx",        CF_USE1|CF_JUMP                         },      
 { "beqx",        CF_USE1|CF_JUMP                         },      
 { "bnex",        CF_USE1|CF_JUMP                         },      
 { "bvcx",        CF_USE1|CF_JUMP                         },      
 { "bvsx",        CF_USE1|CF_JUMP                         },      
 { "bncx",        CF_USE1|CF_JUMP                         },      
 { "bnsx",        CF_USE1|CF_JUMP                         },      
 { "bvc",        CF_USE1|CF_JUMP                         },      
 { "bvs",        CF_USE1|CF_JUMP                         },      
 { "bnc",        CF_USE1|CF_JUMP                         },      
 { "bns",        CF_USE1|CF_JUMP                         },      
 { "btst",        CF_USE1                         },      
 { "addnf",        CF_USE1                         },      

 { "llt",        0                               },
 { "lgt",        0                               },
 { "lge",        0                               },
 { "lle",        0                               },
 { "lcs",        0                               },
 { "lhi",        0                               },
 { "lcc",        0                               },
 { "lls",        0                               },
 { "leq",        0                               },
 { "lne",        0                               },
 { "lra",        0                               },

 { "setlb",        0                               },
 { "retf",        0                               },
 { "ret",        0                               },
 { "rets",        0                               },
 { "trap",        0                               },
*/


{ "beq",        CF_JUMP                               },
{ "bne",        CF_JUMP                               },
{ "mov",        0                               },
{ "nop",        0                               },
{ "div",        0                               },
{ "divu",        0                               },
{ "movz",        0                               },
{ "add",        0                               },
{ "sub",        0                               },
{ "and",        0                               },
{ "or",        0                               },
{ "xor",        0                               },
{ "ext",        0                               },

 { "sync",        0                               },
 { "dret",        CF_STOP                               },
 { "dbreak",        CF_STOP                               },


 { "j", CF_JUMP|CF_USE1 }, 
 { "jal", CF_CALL|CF_USE1 }, 
 { "blez", CF_JUMP }, 
 { "bgtz", CF_JUMP }, 
 { "addi", 0 }, 
 { "addiu", 0 }, 
 { "slti", 0 }, 
 { "sltiu", 0 }, 
 { "andi", 0 }, 
 { "ori", 0 }, 
 { "xori", 0 }, 
 { "li", 0 }, 
 { "beql", CF_JUMP }, 
 { "bnel", CF_JUMP }, 
 { "blezl", CF_JUMP }, 
 { "bgtzl", CF_JUMP }, 
 { "lb", 0 }, 
 { "lh", 0 }, 
 { "lwl", 0 }, 
 { "lw", 0 }, 
 { "lbu", 0 }, 
 { "lhu", 0 }, 
 { "lwr", 0 }, 
 { "sb", 0 }, 
 { "sh", 0 }, 
 { "swl", 0 }, 
 { "sw", 0 }, 
 { "swr", 0 }, 
 { "cache", 0 }, 
 { "ll", 0 }, 
 { "lwc1", 0 }, 
 { "lv.s", 0 }, 
 { "sc", 0 }, 
 { "swc1", 0 }, 
 { "sv.s", 0 }, 

 { "syscall", 0 }, 
 { "break", CF_STOP }, 
 { "srl", 0 }, 
 { "rotr", 0 }, 
 { "srlv", 0 },
 { "rotrv", 0 },
 { "sll", 0 },
 { "sra", 0 },
 { "jr", CF_JUMP },
 { "jalr", CF_CALL },
 { "clz", 0 },
 { "clo", 0 },
 { "mfhi", 0 },
 { "mflo", 0 },
 { "mthi", 0 },
 { "mtlo", 0 },
 { "mult", 0 },
 { "multu", 0 },
 { "madd", 0 },
 { "maddu", 0 },
 { "msub", 0 },
 { "msubu", 0 },
 { "sllv", 0 },
 { "srav", 0 },
 { "movn", 0 },
 { "addu", 0 },
 { "subu", 0 },
 { "nor", 0 },
 { "slt", 0 },
 { "sltu", 0 },
 { "max", 0 },
 { "min", 0 },
 { "bltz", CF_JUMP },
 { "bgez", CF_JUMP },
 { "bltzl", CF_JUMP },
 { "bgezl", CF_JUMP },
 { "bltzal", CF_JUMP },
 { "bgezal", CF_JUMP },
 { "bltzall", CF_JUMP },
 { "bgezall", CF_JUMP },
 { "eret", 0 },
 { "mfc0", 0 },
 { "cfc0", 0 },
 { "mtc0", 0 },
 { "ctc0", 0 },
 { "bc0f", 0 },
 { "bc0t", 0 },
 { "bc0fl", 0 },
 { "bc0tl", 0 },
 { "mfc1", 0 },
 { "cfc1", 0 },
 { "mtc1", 0 },
 { "ctc1", 0 },
 { "bc1f", 0 },
 { "bc1t", 0 },
 { "bc1fl", 0 },
 { "bc1tl", 0 },
 { "add.s", 0 },
 { "sub.s", 0 },
 { "mul.s", 0 },
 { "div.s", 0 },
 { "sqrt.s", 0 },
 { "abs.s", 0 },
 { "mov.s", 0 },
 { "neg.s", 0 },
 { "ceil.w.s", 0 },
 { "trunc.w.s", 0 },
 { "round.w.s", 0 },
 { "floor.w.s", 0 },
 { "cvt.w.s", 0 },
 { "c.f.s", 0 },
 { "c.un.s", 0 },
 { "c.eq.s", 0 },
 { "c.ueq.s", 0 },
 { "c.olt.s", 0 },
 { "c.ult.s", 0 },
 { "c.ole.s", 0 },
 { "c.ule.s", 0 },
 { "c.sf.s", 0 },
 { "c.ngle.s", 0 },
 { "c.seq.s", 0 },
 { "c.ngl.s", 0 },
 { "c.lt.s", 0 },
 { "c.nge.s", 0 },
 { "c.le.s", 0 },
 { "c.ngt.s", 0 },
 { "cvt.s.w", 0 },
 { "mfv", 0 },
 { "mfvc", 0 },
 { "mtv", 0 },
 { "mtvc", 0 },
 { "bvf", 0 },
 { "bvt", 0 },
 { "bvfl", 0 },
 { "bvtl", 0 },
 { "vadd", 0 },
 { "vsub", 0 },
 { "vsbn", 0 },
 { "vdiv", 0 },
 { "vmul", 0 },
 { "vdot", 0 },
 { "vscl", 0 },
 { "vhdp", 0 },
 { "vcrs", 0 },
 { "vdet", 0 },
 { "vcmp", 0 },
 { "vmin", 0 },
 { "vmax", 0 },
 { "vscmp", 0 },
 { "vsge", 0 },
 { "vslt", 0 },
 { "mfdr", 0 },
 { "mtdr", 0 },
 { "D.UNK.00", 0 },
 { "mfic", 0 },
 { "mtic", 0 },
 { "ins", 0 },
 { "wsbh", 0 },
 { "wsbw", 0 },
 { "seb", 0 },
 { "bitrev", 0 },
 { "seh", 0 },
 { "vwbn", 0 },
 { "vcst", 0 },
 { "vf2in", 0 },
 { "vf2iz", 0 },
 { "vf2iu", 0 },
 { "vf2id", 0 },
 { "vi2f", 0 },
 { "vidt", 0 },
 { "vzero", 0 },
 { "vone", 0 },
 { "vrndi", 0 },
 { "vrndf1", 0 },
 { "vrndf2", 0 },
 { "vcmovt", 0 },
 { "vcmovf", 0 },
 { "vrnds", 0 },
 { "vmtvc", 0 },
 { "vmov", 0 },
 { "vabs", 0 },
 { "vneg", 0 },
 { "vsat0", 0 },
 { "vsat1", 0 },
 { "vrcp", 0 },
 { "vrsq", 0 },
 { "vsin", 0 },
 { "vcos", 0 },
 { "vexp2", 0 },
 { "vlog2", 0 },
 { "vsqrt", 0 },
 { "vasin", 0 },
 { "vnrcp", 0 },
 { "vnsin", 0 },
 { "vrexp2", 0 },
 { "vf2h", 0 },
 { "vh2f", 0 },
 { "vsbz", 0 },
 { "vlgb", 0 },
 { "vus2i", 0 },
 { "vs2i", 0 },
 { "vi2uc", 0 },
 { "vi2c", 0 },
 { "vi2us", 0 },
 { "vi2s", 0 },
 { "vsrt1", 0 },
 { "vsrt2", 0 },
 { "vbfy1", 0 },
 { "vbfy2", 0 },
 { "vocp", 0 },
 { "vsocp", 0 },
 { "vfad", 0 },
 { "vavg", 0 },
 { "vsrt3", 0 },
 { "vsrt4", 0 },
 { "vsgn", 0 },
 { "vt4444", 0 },
 { "vt5551", 0 },
 { "vt5650", 0 },
 { "vmfvc", 0 },
 { "lvl.q", 0 },
 { "lvr.q", 0 },
 { "lv.q", 0 },
 { "vpfxs", 0 },
 { "vpfxt", 0 },
 { "vpfxd", 0 },
 { "viim", 0 },
 { "vfim", 0 },
 { "vrot", 0 },
 { "vmmov", 0 },
 { "vmmul", 0 },
 { "vhtfm2", 0 },
 { "vtfm2", 0 },
 { "vhtfm3", 0 },
 { "vtfm3", 0 },
 { "vhtfm4", 0 },
 { "vtfm4", 0 },
 { "vmscl", 0 },
 { "vcrsp", 0 },
 { "vqmul", 0 },
 { "vmidt", 0 },
 { "vmone", 0 },
 { "vmzero", 0 },
 { "svl.q", 0 },
 { "svr.q", 0 },
 { "sv.q", 0 },
 { "vnop", 0 },
 { "vsync", 0 },
 { "vflush", 0 },

 { "vadd.s", 0 },
 { "vadd.p", 0 },
 { "vadd.t", 0 },
 { "vadd.q", 0 },
 { "vsub.s", 0 },
 { "vsub.p", 0 },
 { "vsub.t", 0 },
 { "vsub.q", 0 },
 { "vsbn.s", 0 },
 { "vdiv.s", 0 },
 { "vdiv.p", 0 },
 { "vdiv.t", 0 },
 { "vdiv.q", 0 },
 { "vmul.s", 0 },
 { "vmul.p", 0 },
 { "vmul.t", 0 },
 { "vmul.q", 0 },
 { "vdot.p", 0 },
 { "vdot.t", 0 },
 { "vdot.q", 0 },
 { "vscl.p", 0 },
 { "vscl.t", 0 },
 { "vscl.q", 0 },
 { "vhdp.p", 0 },
 { "vhdp.t", 0 },
 { "vhdp.q", 0 },
 { "vcrs.t", 0 },
 { "vdet.p", 0 },
 { "vcmp.s", 0 },
 { "vcmp.t", 0 },
 { "vcmp.p", 0 },
 { "vcmp.q", 0 },
 { "vmin.s", 0 },
 { "vmin.p", 0 },
 { "vmin.t", 0 },
 { "vmin.q", 0 },
 { "vmax.s", 0 },
 { "vmax.p", 0 },
 { "vmax.t", 0 },
 { "vmax.q", 0 },
 { "vscmp.s", 0 },
 { "vscmp.p", 0 },
 { "vscmp.t", 0 },
 { "vscmp.q", 0 },
 { "vsge.s", 0 },
 { "vsge.p", 0 },
 { "vsge.t", 0 },
 { "vsge.q", 0 },
 { "vslt.s", 0 },
 { "vslt.p", 0 },
 { "vslt.t", 0 },
 { "vslt.q", 0 },
 { "vwbn.s", 0 },
 { "vcst.s", 0 },
 { "vcst.p", 0 },
 { "vcst.t", 0 },
 { "vcst.q", 0 },
 { "vf2in.s", 0 },
 { "vf2in.p", 0 },
 { "vf2in.t", 0 },
 { "vf2in.q", 0 },
 { "vf2iz.s", 0 },
 { "vf2iz.p", 0 },
 { "vf2iz.t", 0 },
 { "vf2iz.q", 0 },
 { "vf2iu.s", 0 },
 { "vf2iu.p", 0 },
 { "vf2iu.t", 0 },
 { "vf2iu.q", 0 },
 { "vf2id.s", 0 },
 { "vf2id.p", 0 },
 { "vf2id.t", 0 },
 { "vf2id.q", 0 },
 { "vi2f.s", 0 },
 { "vi2f.p", 0 },
 { "vi2f.t", 0 },
 { "vi2f.q", 0 },
 { "vidt.p", 0 },
 { "vidt.q", 0 },
 { "vzero.s", 0 },
 { "vzero.p", 0 },
 { "vzero.t", 0 },
 { "vzero.q", 0 },
 { "vone.s", 0 },
 { "vone.p", 0 },
 { "vone.t", 0 },
 { "vone.q", 0 },
 { "vrndi.s", 0 },
 { "vrndi.p", 0 },
 { "vrndi.t", 0 },
 { "vrndi.q", 0 },
 { "vrndf1.s", 0 },
 { "vrndf1.p", 0 },
 { "vrndf1.t", 0 },
 { "vrndf1.q", 0 },
 { "vrndf2.s", 0 },
 { "vrndf2.p", 0 },
 { "vrndf2.t", 0 },
 { "vrndf2.q", 0 },
 { "vcmovt.s", 0 },
 { "vcmovt.p", 0 },
 { "vcmovt.t", 0 },
 { "vcmovt.q", 0 },
 { "vcmovf.s", 0 },
 { "vcmovf.p", 0 },
 { "vcmovf.t", 0 },
 { "vcmovf.q", 0 },
 { "vrnds.s", 0 },
 { "vmov.s", 0 },
 { "vmov.p", 0 },
 { "vmov.t", 0 },
 { "vmov.q", 0 },
 { "vabs.s", 0 },
 { "vabs.p", 0 },
 { "vabs.t", 0 },
 { "vabs.q", 0 },
 { "vneg.s", 0 },
 { "vneg.p", 0 },
 { "vneg.t", 0 },
 { "vneg.q", 0 },
 { "vsat0.s", 0 },
 { "vsat0.p", 0 },
 { "vsat0.t", 0 },
 { "vsat0.q", 0 },
 { "vsat1.s", 0 },
 { "vsat1.p", 0 },
 { "vsat1.t", 0 },
 { "vsat1.q", 0 },
 { "vrcp.s", 0 },
 { "vrcp.p", 0 },
 { "vrcp.t", 0 },
 { "vrcp.q", 0 },
 { "vrsq.s", 0 },
 { "vrsq.p", 0 },
 { "vrsq.t", 0 },
 { "vrsq.q", 0 },
 { "vsin.s", 0 },
 { "vsin.p", 0 },
 { "vsin.t", 0 },
 { "vsin.q", 0 },
 { "vcos.s", 0 },
 { "vcos.p", 0 },
 { "vcos.t", 0 },
 { "vcos.q", 0 },
 { "vexp2.s", 0 },
 { "vexp2.p", 0 },
 { "vexp2.t", 0 },
 { "vexp2.q", 0 },
 { "vlog2.s", 0 },
 { "vlog2.p", 0 },
 { "vlog2.t", 0 },
 { "vlog2.q", 0 },
 { "vsqrt.s", 0 },
 { "vsqrt.p", 0 },
 { "vsqrt.t", 0 },
 { "vsqrt.q", 0 },
 { "vasin.s", 0 },
 { "vasin.p", 0 },
 { "vasin.t", 0 },
 { "vasin.q", 0 },
 { "vnrcp.s", 0 },
 { "vnrcp.p", 0 },
 { "vnrcp.t", 0 },
 { "vnrcp.q", 0 },
 { "vnsin.s", 0 },
 { "vnsin.p", 0 },
 { "vnsin.t", 0 },
 { "vnsin.q", 0 },
 { "vrexp2.s", 0 },
 { "vrexp2.p", 0 },
 { "vrexp2.t", 0 },
 { "vrexp2.q", 0 },
 { "vf2h.p", 0 },
 { "vf2h.q", 0 },
 { "vh2f.s", 0 },
 { "vh2f.p", 0 },
 { "vsbz.s", 0 },
 { "vlgb.s", 0 },
 { "vus2i.s", 0 },
 { "vus2i.p", 0 },
 { "vs2i.s", 0 },
 { "vs2i.p", 0 },
 { "vi2uc.q", 0 },
 { "vi2c.q", 0 },
 { "vi2us.p", 0 },
 { "vi2us.q", 0 },
 { "vi2s.p", 0 },
 { "vi2s.q", 0 },
 { "vsrt1.q", 0 },
 { "vsrt2.q", 0 },
 { "vbfy1.p", 0 },
 { "vbfy1.q", 0 },
 { "vbfy2.q", 0 },
 { "vocp.s", 0 },
 { "vocp.p", 0 },
 { "vocp.t", 0 },
 { "vocp.q", 0 },
 { "vsocp.s", 0 },
 { "vsocp.p", 0 },
 { "vfad.p", 0 },
 { "vfad.t", 0 },
 { "vfad.q", 0 },
 { "vavg.p", 0 },
 { "vavg.t", 0 },
 { "vavg.q", 0 },
 { "vsrt3.q", 0 },
 { "vsrt4.q", 0 },
 { "vsgn.s", 0 },
 { "vsgn.p", 0 },
 { "vsgn.t", 0 },
 { "vsgn.q", 0 },
 { "vt4444.q", 0 },
 { "vt5551.q", 0 },
 { "vt5650.q", 0 },
 { "viim.s", 0 },
 { "vfim.s", 0 },
 { "vrot.p", 0 },
 { "vrot.t", 0 },
 { "vrot.q", 0 },
 { "vmmov.p", 0 },
 { "vmmov.t", 0 },
 { "vmmov.q", 0 },
 { "vmmul.p", 0 },
 { "vmmul.t", 0 },
 { "vmmul.q", 0 },
 { "vhtfm2.p", 0 },
 { "vtfm2.p", 0 },
 { "vhtfm3.t", 0 },
 { "vtfm3.t", 0 },
 { "vhtfm4.q", 0 },
 { "vtfm4.q", 0 },
 { "vmscl.p", 0 },
 { "vmscl.q", 0 },
 { "vcrsp.t", 0 },
 { "vqmul.q", 0 },
 { "vmidt.p", 0 },
 { "vmidt.t", 0 },
 { "vmidt.q", 0 },
 { "vmone.p", 0 },
 { "vmone.t", 0 },
 { "vmone.q", 0 },
 { "vmzero.p", 0 },
 { "vmzero.t", 0 },
 { "vmzero.q", 0 },

 { "lui", CF_USE2|CF_CHG1 },

  };
/*
#ifdef ..BORLANDC..
#if sizeof(Instructions)/sizeof(Instructions[0]) !=  { "last
#error          No match:  sizeof(InstrNames) !!!
#endif
#endif
*/
